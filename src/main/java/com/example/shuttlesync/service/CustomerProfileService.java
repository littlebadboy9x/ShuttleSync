package com.example.shuttlesync.service;

import com.example.shuttlesync.model.*;
import com.example.shuttlesync.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
@Transactional
public class CustomerProfileService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BookingRepository bookingRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * L·∫•y th√¥ng tin profile
     */
    public Map<String, Object> getProfile(Integer userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            throw new RuntimeException("User kh√¥ng t·ªìn t·∫°i");
        }

        User user = userOpt.get();
        Map<String, Object> profile = new HashMap<>();
        
        // Th√¥ng tin c∆° b·∫£n
        profile.put("id", user.getId());
        profile.put("fullName", user.getFullName());
        profile.put("email", user.getEmail());
        profile.put("phone", user.getPhone());
        profile.put("role", user.getRole());
        profile.put("isActive", user.getIsActive());
        profile.put("createdAt", user.getCreatedAt());
        
        // Mock fields kh√¥ng c√≥ trong DB
        profile.put("address", "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM");
        profile.put("dateOfBirth", "1990-05-15");
        profile.put("gender", "male");
        
        // Avatar (mock)
        profile.put("avatar", "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face");
        
        // Th·ªëng k√™
        List<Booking> userBookings = bookingRepository.findByUserId(userId);
        profile.put("totalBookings", userBookings.size());
        profile.put("completedBookings", userBookings.stream()
                .filter(b -> "ƒê√£ ho√†n th√†nh".equals(b.getStatus().getName()))
                .count());
        
        // Membership level (t√≠nh d·ª±a tr√™n s·ªë booking)
        String membershipLevel = calculateMembershipLevel(userBookings.size());
        profile.put("membershipLevel", membershipLevel);
        
        // Points (mock calculation)
        profile.put("points", userBookings.size() * 100);
        
        return profile;
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
     */
    public void updatePersonalInfo(Integer userId, Map<String, Object> profileData) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            throw new RuntimeException("User kh√¥ng t·ªìn t·∫°i");
        }

        User user = userOpt.get();
        
        if (profileData.containsKey("fullName")) {
            user.setFullName((String) profileData.get("fullName"));
        }
        if (profileData.containsKey("phone")) {
            user.setPhone((String) profileData.get("phone"));
        }
        // C√°c field kh√°c nh∆∞ address, dateOfBirth, gender s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω khi extend User model
        
        userRepository.save(user);
    }

    /**
     * Thay ƒë·ªïi m·∫≠t kh·∫©u
     */
    public void changePassword(Integer userId, Map<String, String> passwordData) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            throw new RuntimeException("User kh√¥ng t·ªìn t·∫°i");
        }

        User user = userOpt.get();
        String currentPassword = passwordData.get("currentPassword");
        String newPassword = passwordData.get("newPassword");
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
        if (!passwordEncoder.matches(currentPassword, user.getPassword())) {
            throw new RuntimeException("M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng");
        }
        
        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }

    /**
     * Upload avatar
     */
    public String uploadAvatar(Integer userId, MultipartFile file) {
        // Mock implementation - trong th·ª±c t·∫ø s·∫Ω upload l√™n cloud storage
        return "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face";
    }

    /**
     * L·∫•y th√¥ng tin th√†nh t√≠ch
     */
    public Map<String, Object> getAchievements(Integer userId) {
        List<Booking> userBookings = bookingRepository.findByUserId(userId);
        Map<String, Object> achievements = new HashMap<>();
        
        List<Map<String, Object>> achievementList = new ArrayList<>();
        
        // Achievement d·ª±a tr√™n s·ªë booking
        if (userBookings.size() >= 10) {
            Map<String, Object> achievement = new HashMap<>();
            achievement.put("id", 1);
            achievement.put("name", "Kh√°ch h√†ng th√¢n thi·∫øt");
            achievement.put("icon", "üèÜ");
            achievement.put("description", "ƒê·∫∑t s√¢n 10 l·∫ßn");
            achievement.put("achieved", true);
            achievementList.add(achievement);
        }
        
        // Achievement d·ª±a tr√™n completed bookings
        long completedBookings = userBookings.stream()
                .filter(b -> "ƒê√£ ho√†n th√†nh".equals(b.getStatus().getName()))
                .count();
        
        if (completedBookings >= 5) {
            Map<String, Object> achievement = new HashMap<>();
            achievement.put("id", 2);
            achievement.put("name", "Ng∆∞·ªùi ch∆°i t√≠ch c·ª±c");
            achievement.put("icon", "‚ö°");
            achievement.put("description", "Ho√†n th√†nh 5 booking");
            achievement.put("achieved", true);
            achievementList.add(achievement);
        }
        
        achievements.put("achievements", achievementList);
        achievements.put("totalAchievements", achievementList.size());
        
        return achievements;
    }

    /**
     * L·∫•y c√†i ƒë·∫∑t t√†i kho·∫£n
     */
    public Map<String, Object> getSettings(Integer userId) {
        Map<String, Object> settings = new HashMap<>();
        
        // Mock settings
        settings.put("notifications", Map.of(
            "email", true,
            "sms", false,
            "push", true
        ));
        settings.put("privacy", Map.of(
            "profilePublic", false,
            "showBookingHistory", false
        ));
        settings.put("preferences", Map.of(
            "language", "vi",
            "timezone", "Asia/Ho_Chi_Minh",
            "currency", "VND"
        ));
        
        return settings;
    }

    /**
     * C·∫≠p nh·∫≠t c√†i ƒë·∫∑t
     */
    public void updateSettings(Integer userId, Map<String, Object> settingsData) {
        // Mock implementation - trong th·ª±c t·∫ø s·∫Ω l∆∞u v√†o UserSettings table
        // C√≥ th·ªÉ t·∫°o th√™m entity UserSettings ƒë·ªÉ l∆∞u c√°c c√†i ƒë·∫∑t
    }

    /**
     * L·∫•y l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p
     */
    public List<Map<String, Object>> getLoginHistory(Integer userId, int limit) {
        // Mock implementation - trong th·ª±c t·∫ø s·∫Ω c√≥ table LoginHistory
        List<Map<String, Object>> loginHistory = new ArrayList<>();
        
        for (int i = 0; i < Math.min(limit, 5); i++) {
            Map<String, Object> login = new HashMap<>();
            login.put("id", i + 1);
            login.put("loginTime", LocalDateTime.now().minusDays(i));
            login.put("ipAddress", "192.168.1." + (100 + i));
            login.put("device", "Chrome on Windows");
            login.put("location", "Ho Chi Minh City, Vietnam");
            loginHistory.add(login);
        }
        
        return loginHistory;
    }

    /**
     * X√≥a t√†i kho·∫£n
     */
    public void deleteAccount(Integer userId, Map<String, String> confirmData) {
        String confirmPassword = confirmData.get("password");
        
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            throw new RuntimeException("User kh√¥ng t·ªìn t·∫°i");
        }

        User user = userOpt.get();
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n
        if (!passwordEncoder.matches(confirmPassword, user.getPassword())) {
            throw new RuntimeException("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng ƒë√∫ng");
        }
        
        // Trong th·ª±c t·∫ø, c√≥ th·ªÉ soft delete thay v√¨ hard delete
        // user.setDeleted(true);
        // user.setDeletedAt(LocalDateTime.now());
        // userRepository.save(user);
        
        // Ho·∫∑c hard delete (c·∫ßn c·∫©n th·∫≠n v·ªõi foreign keys)
        // userRepository.delete(user);
        
        throw new RuntimeException("T√≠nh nƒÉng x√≥a t√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t");
    }

    /**
     * T√≠nh membership level d·ª±a tr√™n s·ªë booking
     */
    private String calculateMembershipLevel(int totalBookings) {
        if (totalBookings >= 50) {
            return "Platinum";
        } else if (totalBookings >= 20) {
            return "Gold";
        } else if (totalBookings >= 10) {
            return "Silver";
        } else {
            return "Bronze";
        }
    }
} 