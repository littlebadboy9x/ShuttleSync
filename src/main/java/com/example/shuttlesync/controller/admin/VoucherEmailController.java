package com.example.shuttlesync.controller.admin;

import com.example.shuttlesync.service.VoucherEmailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/admin/voucher-emails")
@RequiredArgsConstructor
@Slf4j
public class VoucherEmailController {

    private final VoucherEmailService voucherEmailService;

    /**
     * Test g·ª≠i email voucher
     */
    @PostMapping("/test")
    public ResponseEntity<?> testVoucherEmail(@RequestParam String email) {
        try {
            log.info("üß™ Test g·ª≠i email voucher ƒë·∫øn: {}", email);
            
            boolean sent = voucherEmailService.sendTestVoucherEmail(email);
            
            if (sent) {
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "‚úÖ ƒê√£ g·ª≠i email test voucher th√†nh c√¥ng ƒë·∫øn: " + email
                ));
            } else {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "‚ùå Kh√¥ng th·ªÉ g·ª≠i email test voucher"
                ));
            }
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi test email voucher: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                "success", false,
                "message", "L·ªói server: " + e.getMessage()
            ));
        }
    }

    /**
     * G·ª≠i email voucher th·ªß c√¥ng cho user
     */
    @PostMapping("/send-manual")
    public ResponseEntity<?> sendManualVoucherEmail(
            @RequestParam Integer userId,
            @RequestParam Integer voucherId) {
        try {
            log.info("üì§ G·ª≠i email voucher th·ªß c√¥ng - User: {}, Voucher: {}", userId, voucherId);
            
            boolean sent = voucherEmailService.sendVoucherEmailToUser(userId, voucherId);
            
            if (sent) {
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "‚úÖ ƒê√£ g·ª≠i email voucher th√†nh c√¥ng"
                ));
            } else {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "‚ùå Kh√¥ng th·ªÉ g·ª≠i email voucher"
                ));
            }
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email voucher th·ªß c√¥ng: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                "success", false,
                "message", "L·ªói server: " + e.getMessage()
            ));
        }
    }

    /**
     * X·ª≠ l√Ω email voucher ch·ªù g·ª≠i (trigger th·ªß c√¥ng)
     */
    @PostMapping("/process-pending")
    public ResponseEntity<?> processPendingEmails() {
        try {
            log.info("üîÑ X·ª≠ l√Ω email voucher ch·ªù g·ª≠i (th·ªß c√¥ng)");
            
            voucherEmailService.processVoucherEmails();
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "‚úÖ ƒê√£ x·ª≠ l√Ω email voucher ch·ªù g·ª≠i"
            ));
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi x·ª≠ l√Ω email voucher: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                "success", false,
                "message", "L·ªói server: " + e.getMessage()
            ));
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i email service
     */
    @GetMapping("/status")
    public ResponseEntity<?> getEmailServiceStatus() {
        try {
            Map<String, Object> status = voucherEmailService.getEmailServiceStatus();
            return ResponseEntity.ok(status);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i email service: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                "success", false,
                "message", "L·ªói server: " + e.getMessage()
            ));
        }
    }

    /**
     * L·∫•y danh s√°ch email logs
     */
    @GetMapping("/logs")
    public ResponseEntity<?> getEmailLogs(
            @RequestParam(defaultValue = "10") int limit,
            @RequestParam(defaultValue = "VOUCHER") String type) {
        try {
            // C√≥ th·ªÉ th√™m method n√†y v√†o VoucherEmailService n·∫øu c·∫ßn
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn"
            ));
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi l·∫•y email logs: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                "success", false,
                "message", "L·ªói server: " + e.getMessage()
            ));
        }
    }
} 